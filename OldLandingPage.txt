import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:disaster_readiness_application/profile_page.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/material.dart';
import 'package:intl/intl.dart';
import 'package:fluttertoast/fluttertoast.dart';
import 'package:flutter_spinkit/flutter_spinkit.dart';

import 'login_page.dart';

class LandingPage extends StatefulWidget {
  static const String landingPage = '/landing';

  const LandingPage({Key? key}) : super(key: key);

  @override
  _LandingPageState createState() => _LandingPageState();
}

class _LandingPageState extends State<LandingPage> {
  int _selectedIndex = 0; // To keep track of the selected item in the drawer

  final User? user = FirebaseAuth.instance.currentUser;
  final CollectionReference _emergenciesCollection =
  FirebaseFirestore.instance.collection('emergencies');

  final TextEditingController _contactNumberController = TextEditingController();
  final TextEditingController _locationController = TextEditingController();

  @override
  void initState() {
    super.initState();
    // Fetch the current user's contact number when the landing page is initialized
    _fetchCurrentUserContactNumber();
    _fetchCurrentUserLocation();
  }

  // Method to fetch the current user's contact number from Firestore
  Future<void> _fetchCurrentUserContactNumber() async {
    if (user != null) {
      final userDoc =
      await FirebaseFirestore.instance.collection('users').doc(user!.uid).get();
      String contactNumber = userDoc['contact_number'] ?? '';
      _contactNumberController.text = contactNumber;
    }
  }
  Future<void> _fetchCurrentUserLocation() async {
    if (user != null) {
      final userDoc =
      await FirebaseFirestore.instance.collection('users').doc(user!.uid).get();
      String location = userDoc['location'] ?? '';
      _locationController.text = location;
    }
  }

  void _sendEmergencySignal(BuildContext context) {
    String emergencyDescription = '';
    String location = _locationController.text;
    String contactNumber = _contactNumberController.text;
    DateTime currentTime = DateTime.now();
    String formattedDateTime = DateFormat('dd/MM/yyyy - h:mm a').format(currentTime);

    showDialog(
      context: context,
      builder: (BuildContext context) {
        return Dialog(
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(20.0),
          ),
          backgroundColor: Colors.transparent,
          child: Container(
            padding: const EdgeInsets.all(16.0),
            decoration: BoxDecoration(
              gradient: LinearGradient(
                begin: Alignment.topCenter,
                end: Alignment.bottomCenter,
                colors: [Colors.blue[200]!, Colors.blue[400]!],
              ),
              borderRadius: BorderRadius.circular(20.0),
            ),
            child: Column(
              mainAxisSize: MainAxisSize.min,
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                const Text(
                  "Emergency",
                  style: TextStyle(
                    color: Colors.white,
                    fontSize: 20.0,
                    fontWeight: FontWeight.bold,
                  ),
                ),
                const SizedBox(height: 16.0),
                const Text(
                  "What is the emergency?",
                  style: TextStyle(
                    color: Colors.white,
                    fontSize: 16.0,
                    fontWeight: FontWeight.bold,
                  ),
                ),
                const SizedBox(height: 10),
                TextField(
                  onChanged: (value) => emergencyDescription = value,
                  decoration: const InputDecoration(
                    hintText: "Emergency description",
                    hintStyle: TextStyle(color: Colors.white),
                    enabledBorder: UnderlineInputBorder(
                      borderSide: BorderSide(color: Colors.white),
                    ),
                    focusedBorder: UnderlineInputBorder(
                      borderSide: BorderSide(color: Colors.white),
                    ),
                  ),
                ),
                const SizedBox(height: 10),
                const Text(
                  "Current Emergency Location",
                  style: TextStyle(
                    color: Colors.white,
                    fontSize: 16.0,
                    fontWeight: FontWeight.bold,
                  ),
                ),
                const SizedBox(height: 10),
                TextField(
                  controller: _locationController,
                  onChanged: (value) => location = value,
                  decoration: const InputDecoration(
                    hintText: "Enter your location",
                    hintStyle: TextStyle(color: Colors.white),
                    enabledBorder: UnderlineInputBorder(
                      borderSide: BorderSide(color: Colors.white),
                    ),
                    focusedBorder: UnderlineInputBorder(
                      borderSide: BorderSide(color: Colors.white),
                    ),
                  ),
                ),
                const SizedBox(height: 10),
                const Text(
                  "Contact Number",
                  style: TextStyle(
                    color: Colors.white,
                    fontSize: 16.0,
                    fontWeight: FontWeight.bold,
                  ),
                ),
                const SizedBox(height: 10),
                TextField(
                  controller: _contactNumberController,
                  onChanged: (value) => contactNumber = value,
                  decoration: const InputDecoration(
                    hintText: "Enter your contact number",
                    hintStyle: TextStyle(color: Colors.white),
                    enabledBorder: UnderlineInputBorder(
                      borderSide: BorderSide(color: Colors.white),
                    ),
                    focusedBorder: UnderlineInputBorder(
                      borderSide: BorderSide(color: Colors.white),
                    ),
                  ),
                ),
                const SizedBox(height: 10),
                Row(
                  mainAxisAlignment: MainAxisAlignment.end, // Aligns the button to the right
                  children: [
                    Expanded(
                      child: TextButton(
                        onPressed: () {
                          if (emergencyDescription.isNotEmpty &&
                              _contactNumberController.text.isNotEmpty &&
                              _locationController.text.isNotEmpty) {
                            showDialog(
                              context: context,
                              barrierDismissible: false,
                              builder: (BuildContext context) {
                                return const Center(
                                  child: SpinKitChasingDots(
                                    color: Colors.blue,
                                    size: 50.0,
                                  ),
                                );
                              },
                            );

                            DocumentReference emergencyRef = _emergenciesCollection.doc();
                            emergencyRef.set({
                              'userId': user!.uid,
                              'active': true,
                              'description': emergencyDescription,
                              'location': location,
                              'contactNumber': contactNumber,
                              'email': user!.email,
                              'dateTime': formattedDateTime,
                              'status': "Verifying Information",
                            }).then((_) {
                              Navigator.pop(context);
                              Navigator.of(context).pop();
                              Fluttertoast.showToast(
                                msg: "Emergency Sent",
                                toastLength: Toast.LENGTH_SHORT,
                                gravity: ToastGravity.CENTER,
                                backgroundColor: Colors.green,
                                textColor: Colors.white,
                                fontSize: 16.0,
                              );
                            });
                          }
                          else{
                            Fluttertoast.showToast(
                              msg: "Please Input your Emergency",
                              toastLength: Toast.LENGTH_SHORT,
                              gravity: ToastGravity.CENTER,
                              backgroundColor: Colors.red,
                              textColor: Colors.white,
                              fontSize: 16.0,
                            );
                          }
                        },
                        style: TextButton.styleFrom(
                          padding: const EdgeInsets.symmetric(horizontal: 24.0, vertical: 12.0),
                          backgroundColor: Colors.white,
                          foregroundColor: Colors.blue[700],
                          shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(12.0),
                          ),
                          elevation: 4.0, // Add elevation here
                        ),
                        child: const Text("Send"),
                      ),
                    ),
                  ],
                ),
              ],
            ),
          ),
        );
      },
    );
  }


  // Confirmation dialog for logout
  Future<bool> _onBackPressed(BuildContext context) {
    return showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text("Logout"),
        content: const Text("Do you want to logout?"),
        actions: [
          TextButton(
            onPressed: () {
              Navigator.of(context).pop(false);
            },
            child: const Text("No"),
          ),
          TextButton(
            onPressed: () {
              Navigator.of(context).pop(true);
              Fluttertoast.showToast(
                msg: "Logged Out",
                toastLength: Toast.LENGTH_SHORT,
                gravity: ToastGravity.CENTER,
                backgroundColor: Colors.blue,
                textColor: Colors.white,
                fontSize: 16.0,
              );
              showDialog(
                context: context,
                barrierDismissible: false,
                builder: (BuildContext context) {
                  return const Center(
                    child: SpinKitChasingDots(
                      color: Colors.blue,
                      size: 50.0,
                    ),
                  );
                },
              );
            },

            child: const Text("Yes"),

          ),
        ],
      ),
    ).then((value) async {
      if (value == true) {
        Navigator.pop(context);
        await FirebaseAuth.instance.signOut();
        Navigator.pushNamedAndRemoveUntil(
          context,
          LoginPage.loginPage,
              (route) => false,
        );
      }
      return value ?? false;
    });
  }


  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text("Landing Page"),
      ),
      drawer: Drawer(
        child: ListView(
          padding: EdgeInsets.zero,
          children: [
            const DrawerHeader(
              decoration: BoxDecoration(
                color: Colors.blue,
              ),
              child: Text(
                'Menu',
                style: TextStyle(
                  color: Colors.white,
                  fontSize: 24,
                ),
              ),
            ),
            ListTile(
              title: const Text('Home'),
              selected: _selectedIndex == 0,
              onTap: () {
                Navigator.pop(context); // Close the drawer after navigation if needed.
                setState(() {
                  _selectedIndex = 0;
                });
              },
            ),
            ListTile(
              title: const Text('Profile'),
              selected: _selectedIndex == 1,
              onTap: () {
                Navigator.pop(context); // Close the drawer after navigation if needed.
                Navigator.pushNamedAndRemoveUntil(
                  context,
                  ProfilePage.profilepage,
                      (route) => false,
                );
                setState(() {
                  _selectedIndex = 1;
                });
              },
            ),
            ListTile(
              title: const Text('Evacuation Guides'),
              selected: _selectedIndex == 2,
              onTap: () {
                Navigator.pop(context); // Close the drawer after navigation if needed.
                setState(() {
                  _selectedIndex = 2;
                });
              },
            ),
            ListTile(
              title: const Text('Emergency Hotlines'),
              selected: _selectedIndex == 3,
              onTap: () {
                Navigator.pop(context); // Close the drawer after navigation if needed.
                setState(() {
                  _selectedIndex = 3;
                });
              },
            ),
            ListTile(
              title: const Text('Logout'),
              onTap: () async {
                bool logout = await _onBackPressed(context);
                if (logout) {
                  FirebaseAuth.instance.signOut();
                  Navigator.pushNamedAndRemoveUntil(
                    context,
                    LoginPage.loginPage,
                        (route) => false,
                  );
                }
              },
            ),
          ],
        ),
      ),
      body: WillPopScope(
        onWillPop: () => _onBackPressed(context),
        child: SingleChildScrollView(
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              FutureBuilder<DocumentSnapshot<Map<String, dynamic>>>(
                future: FirebaseFirestore.instance.collection('users').doc(user?.uid).get(),
                builder: (context, snapshot) {
                  if (snapshot.connectionState == ConnectionState.waiting) {
                    return const CircularProgressIndicator();
                  }
                  final userData = snapshot.data?.data();
                  final username = userData?['name'] ?? 'User';
                  return Center(
                    child: Padding(
                      padding: const EdgeInsets.symmetric(horizontal: 16.0),
                      child: Text(
                        "Welcome, $username!",
                        style: const TextStyle(
                          fontSize: 20.0,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                    ),
                  );
                },
              ),
              const SizedBox(height: 20),
              Center(
                child: ElevatedButton(
                  onPressed: () {
                    _sendEmergencySignal(context);
                  },
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.red,
                    elevation: 8,
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(20),
                    ),
                  ),
                  child: const Padding(
                    padding: EdgeInsets.symmetric(vertical: 12, horizontal: 20),
                    child: Text(
                      "Emergency",
                      style: TextStyle(fontSize: 18),
                    ),
                  ),
                ),
              ),
              StreamBuilder<QuerySnapshot<Map<String, dynamic>>>(
                stream: FirebaseFirestore.instance.collection('news').snapshots(),
                builder: (context, snapshot) {
                  if (snapshot.connectionState == ConnectionState.waiting) {
                    return const CircularProgressIndicator();
                  }
                  final newsList = snapshot.data?.docs ?? [];
                  return GridView.count(
                    shrinkWrap: true,
                    crossAxisCount: 2,
                    crossAxisSpacing: 10,
                    mainAxisSpacing: 10,
                    padding: const EdgeInsets.all(16.0),
                    physics: const NeverScrollableScrollPhysics(),
                    children: List.generate(newsList.length, (index) {
                      final newsData = newsList[index].data();
                      final title = newsData['Title'] ?? '';
                      final description = newsData['Description'] ?? '';
                      return _buildNewsSection(context, title, description);
                    }),
                  );
                },
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildNewsSection(BuildContext context, String sectionTitle, String newsContent) {
    const int maxChars = 50;
    String truncatedContent =
    newsContent.length > maxChars ? '${newsContent.substring(0, maxChars)}...' : newsContent;

    return GestureDetector(
      onTap: () {
        _showNewsDialog(context, sectionTitle, newsContent);
      },
      child: Container(
        padding: const EdgeInsets.all(16.0),
        decoration: BoxDecoration(
          color: Colors.white,
          borderRadius: BorderRadius.circular(10),
          boxShadow: [
            BoxShadow(
              color: Colors.grey.withOpacity(0.5),
              spreadRadius: 2,
              blurRadius: 5,
              offset: const Offset(0, 3),
            ),
          ],
        ),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              sectionTitle,
              style: const TextStyle(
                fontSize: 20.0,
                fontWeight: FontWeight.bold,
              ),
            ),
            const SizedBox(height: 8.0),
            Text(
              truncatedContent,
              style: const TextStyle(
                fontSize: 16.0,
              ),
            ),
          ],
        ),
      ),
    );
  }

  void _showNewsDialog(BuildContext context, String sectionTitle, String newsContent) {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text(
            sectionTitle,
            style: const TextStyle(
              fontSize: 24.0,
              fontWeight: FontWeight.bold,
            ),
          ),
          content: Text(
            newsContent,
            style: const TextStyle(
              fontSize: 16.0,
            ),
          ),
          actions: [
            TextButton(
              onPressed: () {
                Navigator.of(context).pop();
              },
              child: const Text("Close"),
            ),
          ],
        );
      },
    );
  }
}
